console.log("product-list.js loaded");
console.log("Current pathname:", window.location.pathname);

// Centralized function to get headers with token and CSRF
function getHeaders() {
  const token = localStorage.getItem("token");
  const csrfToken = document.getElementById("csrf-token")?.value || "";
  const headers = token ? { Authorization: `Bearer ${token}` } : {};
  if (csrfToken && csrfToken !== "YOUR_CSRF_TOKEN_HERE") {
    headers["X-CSRF-Token"] = csrfToken;
  }
  return headers;
}

// Validate image file types
function isValidImage(file) {
  const validTypes = ["image/jpeg", "image/png", "image/gif"];
  return validTypes.includes(file.type);
}

async function fetchProductsList(
  containerId = "dashboard-products-list",
  view = "dashboard"
) {
  const productsGrid = document.getElementById(containerId);
  if (!productsGrid) {
    console.error(`Container with ID ${containerId} not found`);
    alert(
      "Error: Products container not found. Please check the page structure."
    );
    return;
  }

  productsGrid.innerHTML =
    '<p class="text-gray-500 text-center py-4">Loading products...</p>';

  try {
    const headers = getHeaders();
    if (!headers.Authorization && view === "dashboard") {
      console.warn("No authentication token found. Redirecting to login.");
      alert("You are not authenticated. Please log in.");
      window.location.href = "login.html";
      return;
    }

    // Fetch products with cache-busting
    const response = await fetch(
      `http://192.168.0.102:5000/api/manuplast/producttypes/?t=${Date.now()}`,
      { headers }
    );
    console.log("Product fetch response status:", response.status);
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(
        `Failed to fetch products: ${response.status} ${response.statusText} - ${errorText}`
      );
    }

    const products = await response.json();
    console.log("Fetched products:", products);

    if (!Array.isArray(products) || products.length === 0) {
      console.log("No products found or invalid response format");
      productsGrid.innerHTML =
        '<p class="text-gray-500 text-center py-4">No products available.</p>';
      return;
    }

    // Explicitly clear the grid before rendering
    productsGrid.innerHTML = "";

    // Fetch categories
    const categoriesResponse = await fetch(
      `http://192.168.0.102:5000/api/manuplast/categories?t=${Date.now()}`,
      { headers }
    );
    const categories = categoriesResponse.ok
      ? await categoriesResponse.json()
      : [];
    const categoryMap = Object.fromEntries(
      categories.map((cat) => [cat.id, cat.name])
    );
    console.log("Category map:", categoryMap);

    // Fetch sizes, colors, and images for each product
    await Promise.all(
      products.map(async (product) => {
        const sizesResponse = await fetch(
          `http://192.168.0.102:5000/api/manuplast/producttypesizes/product/${
            product.id
          }?t=${Date.now()}`,
          { headers }
        );
        const colorsResponse = await fetch(
          `http://192.168.0.102:5000/api/manuplast/producttypecolors/product/${
            product.id
          }?t=${Date.now()}`,
          { headers }
        );
        const imagesResponse = await fetch(
          `http://192.168.0.102:5000/api/manuplast/producttypeimages/product/${
            product.id
          }?t=${Date.now()}`,
          { headers }
        );
        product.sizes = sizesResponse.ok
          ? (await sizesResponse.json()).map((s) => ({
              id: s.id,
              size: s.size || "",
            }))
          : [];
        product.colors = colorsResponse.ok
          ? (await colorsResponse.json()).map((c) => ({
              id: c.id,
              color: c.color || "",
            }))
          : [];
        product.images = imagesResponse.ok
          ? (await imagesResponse.json()).map((i) => ({
              id: i.id,
              image_url: i.image_url || "",
            }))
          : [];
        console.log(`Product ${product.id} data:`, {
          sizes: product.sizes,
          colors: product.colors,
          images: product.images,
        });
      })
    );

    products.forEach((product) => {
      if (!product.id || typeof product.id !== "string") {
        console.warn(`Invalid product ID:`, product);
        return;
      }

      const isActive = product.status?.toLowerCase() === "active";
      if (view === "default" && !isActive) return;

      const productCard = document.createElement("div");
      productCard.classList.add("text-center");

      const safeProduct = {
        id: product.id,
        name: product.name || "Unnamed",
        description: product.description || "",
        price: product.price || 0,
        category_id: product.category_id || "",
        images: Array.isArray(product.images) ? product.images : [],
        status: product.status || "",
        sizes: Array.isArray(product.sizes) ? product.sizes : [],
        colors: Array.isArray(product.colors) ? product.colors : [],
      };

      productCard.innerHTML = `
        <div class="bg-white p-4 rounded-lg shadow flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <img src="${
              safeProduct.images[0]?.image_url || "./images/placeholder.jpg"
            }" alt="${
        safeProduct.name
      }" class="w-16 h-16 object-cover rounded" />
            <div class="text-left">
              <h4 class="font-semibold text-gray-800">${safeProduct.name}</h4>
              <p class="text-sm text-gray-500">Category: ${
                categoryMap[safeProduct.category_id] || "Unknown"
              }</p>
              <p class="text-sm text-gray-500">Price: â‚¹${safeProduct.price.toFixed(
                2
              )}</p>
              <p class="text-sm text-gray-500">Sizes: ${
                safeProduct.sizes.map((s) => s.size).join(", ") || "None"
              }</p>
              <p class="text-sm text-gray-500">Colors: ${
                safeProduct.colors.map((c) => c.color).join(", ") || "None"
              }</p>
              <p class="text-sm text-gray-500 truncate">${
                safeProduct.description.slice(0, 60) || "No description"
              }</p>
            </div>
          </div>
          <div class="flex items-center space-x-2">
            <button onclick='openUpdateProductModal(${JSON.stringify(
              safeProduct
            ).replace(
              /"/g,
              '"'
            )})' class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-sm">
              Edit
            </button>
            <button data-id="${
              safeProduct.id
            }" class="delete-product-btn bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm">Delete</button>
            <button data-id="${
              safeProduct.id
            }" data-active="${isActive}" class="toggle-product-btn ${
        isActive
          ? "bg-yellow-500 hover:bg-yellow-600"
          : "bg-green-500 hover:bg-green-600"
      } text-white px-3 py-1 rounded text-sm">
              ${isActive ? "Deactivate" : "Activate"}
            </button>
          </div>
        </div>
      `;

      productsGrid.appendChild(productCard);
    });

    // Remove and re-add event listener to prevent duplicates
    productsGrid.removeEventListener("click", handleDashboardProductActions);
    productsGrid.addEventListener("click", handleDashboardProductActions);
    console.log("Product list rendered successfully");
  } catch (error) {
    console.error("Error fetching products:", error);
    productsGrid.innerHTML = `<p class="text-red-500 text-center py-4">Error loading products: ${error.message}</p>`;
    alert(`Error fetching products: ${error.message}`);
  }
}

function openAddProductModal() {
  const modal = document.getElementById("add-product-modal");
  if (!modal) {
    console.error("Add product modal not found");
    alert("Error: Add product modal not found.");
    return;
  }
  modal.classList.remove("hidden");
  document.getElementById("add-product-form")?.reset();
  document.getElementById("add-product-images").value = "";
  loadCategoriesForAddModal();
  console.log("Add product modal opened");
}

function openUpdateProductModal(product) {
  const modal = document.getElementById("update-product-modal");
  if (!modal) {
    console.error("Update product modal not found");
    alert("Error: Update product modal not found.");
    return;
  }

  console.log("Opening update modal for product:", product);

  document.getElementById("update-product-id").value = product.id || "";
  document.getElementById("update-product-name").value = product.name || "";
  document.getElementById("update-product-description").value =
    product.description || "";
  document.getElementById("update-product-price").value = product.price || "";
  document.getElementById("update-product-sizes").value = Array.isArray(
    product.sizes
  )
    ? product.sizes.map((s) => s.size).join(", ")
    : "";
  document.getElementById("update-product-colors").value = Array.isArray(
    product.colors
  )
    ? product.colors.map((c) => c.color).join(", ")
    : "";
  document.getElementById("update-product-images").value = "";

  const sizeIdsInput = document.getElementById("update-product-size-ids");
  const colorIdsInput = document.getElementById("update-product-color-ids");
  const imageIdsInput = document.getElementById("update-product-image-ids");
  if (sizeIdsInput)
    sizeIdsInput.value = Array.isArray(product.sizes)
      ? product.sizes.map((s) => s.id).join(",")
      : "";
  if (colorIdsInput)
    colorIdsInput.value = Array.isArray(product.colors)
      ? product.colors.map((c) => c.id).join(",")
      : "";
  if (imageIdsInput)
    imageIdsInput.value = Array.isArray(product.images)
      ? product.images.map((i) => i.id).join(",")
      : "";

  const categorySelect = document.getElementById("update-product-category");
  if (categorySelect) {
    categorySelect.value = product.category_id || "";
  } else {
    console.error("Update product category select not found");
  }

  const previewContainer = document.getElementById(
    "current-product-image-preview"
  );
  previewContainer.innerHTML =
    '<p class="text-sm text-gray-500 w-full text-center">Current Images:</p>';
  if (Array.isArray(product.images) && product.images.length) {
    product.images.forEach((img) => {
      if (img.image_url) {
        const imgElement = document.createElement("img");
        imgElement.src = img.image_url;
        imgElement.className = "w-16 h-16 object-cover rounded";
        imgElement.dataset.imageId = img.id;
        previewContainer.appendChild(imgElement);
      }
    });
    previewContainer.classList.remove("hidden");
  } else {
    previewContainer.classList.add("hidden");
  }

  modal.classList.remove("hidden");
  loadCategoriesForUpdateModal();
  console.log("Update product modal opened for product:", product.id);
}

function handleDashboardProductActions(e) {
  const deleteBtn = e.target.closest(".delete-product-btn");
  const toggleBtn = e.target.closest(".toggle-product-btn");

  if (deleteBtn) {
    const productId = deleteBtn.getAttribute("data-id");
    if (!productId) {
      alert("Error: Product ID is missing.");
      return;
    }
    if (confirm("Are you sure you want to delete this product?")) {
      console.log(`Deleting product with ID: ${productId}`);
      deleteProduct(productId);
    }
  }

  if (toggleBtn) {
    const productId = toggleBtn.getAttribute("data-id");
    const isActive = toggleBtn.getAttribute("data-active") === "true";
    if (!productId) {
      alert("Error: Product ID is missing.");
      return;
    }
    const action = isActive ? "deactivate" : "activate";
    if (confirm(`Are you sure you want to ${action} this product?`)) {
      console.log(
        `Toggling product status for ID: ${productId}, new status: ${!isActive}`
      );
      toggleProductActive(productId, isActive);
    }
  }
}

async function deleteProduct(id) {
  try {
    const headers = getHeaders();
    if (!headers.Authorization) {
      console.warn("No authentication token found. Redirecting to login.");
      alert("You are not authenticated. Please log in.");
      window.location.href = "login.html";
      return;
    }

    const response = await fetch(
      `http://192.168.0.102:5000/api/manuplast/producttypes/${id}`,
      {
        method: "DELETE",
        headers,
      }
    );

    console.log("Delete product response status:", response.status);
    if (!response.ok) {
      const errorText = await response.json().catch(() => ({}));
      const errorMessage =
        errorText.message || response.statusText || "Unknown error";
      throw new Error(
        `Failed to delete product: ${response.status} - ${errorMessage}`
      );
    }

    alert("Product deleted successfully!");
    fetchProductsList();
  } catch (error) {
    console.error("Error deleting product:", error);
    alert(`Failed to delete product: ${error.message}`);
  }
}

async function toggleProductActive(productId, currentStatus) {
  try {
    const headers = getHeaders();
    if (!headers.Authorization) {
      console.warn("No authentication token found. Redirecting to login.");
      alert("You are not authenticated. Please log in.");
      window.location.href = "login.html";
      return;
    }

    const isActive = currentStatus === true || currentStatus === "true";
    const newStatus = !isActive;

    const response = await fetch(
      `http://192.168.0.102:5000/api/manuplast/producttypes/${productId}/status`,
      {
        method: "PATCH",
        headers: { ...headers, "Content-Type": "application/json" },
        body: JSON.stringify({ active: newStatus }),
      }
    );

    console.log("Toggle product status response status:", response.status);
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      const errorMessage =
        errorData.message || response.statusText || "Unknown error";
      throw new Error(
        `Failed to update product status: ${response.status} - ${errorMessage}`
      );
    }

    alert(`Product ${newStatus ? "activated" : "deactivated"} successfully!`);
    const toggleBtn = document.querySelector(
      `.toggle-product-btn[data-id="${productId}"]`
    );
    if (toggleBtn) {
      toggleBtn.setAttribute("data-active", newStatus);
      toggleBtn.textContent = newStatus ? "Deactivate" : "Activate";
      toggleBtn.className = `toggle-product-btn ${
        newStatus
          ? "bg-yellow-500 hover:bg-yellow-600"
          : "bg-green-500 hover:bg-green-600"
      } text-white px-3 py-1 rounded text-sm`;
    }

    fetchProductsList();
  } catch (error) {
    console.error("Error updating product status:", error);
    alert(`Failed to update product status: ${error.message}`);
  }
}

async function loadCategoriesForAddModal() {
  try {
    const headers = getHeaders();
    const response = await fetch(
      `http://192.168.0.102:5000/api/manuplast/categories?t=${Date.now()}`,
      { headers }
    );

    console.log("Categories fetch for add modal status:", response.status);
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(
        `Failed to fetch categories: ${response.status} - ${errorText}`
      );
    }

    const categories = await response.json();
    console.log("Fetched categories for add modal:", categories);
    const select = document.getElementById("add-product-category");

    if (select) {
      select.innerHTML =
        '<option value="" disabled selected>Select Category</option>' +
        categories
          .map((cat) => `<option value="${cat.id}">${cat.name}</option>`)
          .join("");
    } else {
      console.error("Add product category select element not found");
      alert("Error: Category select element not found.");
    }
  } catch (error) {
    console.error("Error loading categories for add modal:", error);
    alert(`Error loading categories: ${error.message}`);
  }
}

async function loadCategoriesForUpdateModal() {
  try {
    const headers = getHeaders();
    const response = await fetch(
      `http://192.168.0.102:5000/api/manuplast/categories?t=${Date.now()}`,
      { headers }
    );

    console.log("Categories fetch for update modal status:", response.status);
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(
        `Failed to fetch categories: ${response.status} - ${errorText}`
      );
    }

    const categories = await response.json();
    console.log("Fetched categories for update modal:", categories);
    const select = document.getElementById("update-product-category");

    if (select) {
      select.innerHTML =
        '<option value="" disabled selected>Select Category</option>' +
        categories
          .map((cat) => `<option value="${cat.id}">${cat.name}</option>`)
          .join("");
    } else {
      console.error("Update product category select element not found");
      alert("Error: Category select element not found.");
    }
  } catch (error) {
    console.error("Error loading categories for update modal:", error);
    alert(`Error loading categories: ${error.message}`);
  }
}

document
  .getElementById("add-product-form")
  ?.addEventListener("submit", async function (e) {
    e.preventDefault();

    const headers = getHeaders();
    if (!headers.Authorization) {
      console.warn("No authentication token found. Redirecting to login.");
      alert("You are not authenticated. Please log in.");
      window.location.href = "login.html";
      return;
    }

    const name = document.getElementById("add-product-name")?.value?.trim();
    const description = document
      .getElementById("add-product-description")
      ?.value?.trim();
    const price = document.getElementById("add-product-price")?.value;
    const categoryId = document.getElementById("add-product-category")?.value;
    const imageInput = document.getElementById("add-product-images");
    const sizes = document
      .getElementById("add-product-sizes")
      ?.value.split(",")
      .map((s) => s.trim())
      .filter((s) => s);
    const colors = document
      .getElementById("add-product-colors")
      ?.value.split(",")
      .map((c) => c.trim())
      .filter((c) => c);

    if (!name || name.length < 2) {
      alert("Product name is required and must be at least 2 characters long");
      return;
    }
    if (!description || description.length < 10) {
      alert("Description is required and must be at least 10 characters long");
      return;
    }
    if (!price || isNaN(parseFloat(price)) || parseFloat(price) <= 0) {
      alert("Price must be a valid positive number");
      return;
    }
    if (!categoryId) {
      alert("Category is required");
      return;
    }
    if (!imageInput?.files?.length) {
      alert("At least one image is required");
      return;
    }
    for (let file of imageInput.files) {
      if (!isValidImage(file)) {
        alert("Invalid image type. Only JPEG, PNG, and GIF are allowed.");
        return;
      }
    }

    try {
      const formData = new FormData();
      formData.append("name", name);
      formData.append("description", description);
      formData.append("price", parseFloat(price));
      formData.append("category_id", categoryId);

      const submitBtn = document.querySelector(
        "#add-product-form button[type=submit]"
      );
      submitBtn.disabled = true;
      submitBtn.textContent = "Adding...";

      const productResponse = await fetch(
        "http://192.168.0.102:5000/api/manuplast/producttypes",
        {
          method: "POST",
          headers,
          body: formData,
        }
      );

      console.log("Add product response status:", productResponse.status);
      if (!productResponse.ok) {
        const errorData = await productResponse.json().catch(() => ({}));
        throw new Error(
          `Failed to add product: ${
            errorData.message || productResponse.statusText
          }`
        );
      }

      const createdProduct = await productResponse.json();
      const productId = createdProduct.id;

      await Promise.all(
        Array.from(imageInput.files).map(async (file, i) => {
          const imageForm = new FormData();
          imageForm.append("producttype_id", productId);
          imageForm.append("image", file);
          const imgResponse = await fetch(
            "http://192.168.0.102:5000/api/manuplast/producttypeimages",
            {
              method: "POST",
              headers,
              body: imageForm,
            }
          );
          if (!imgResponse.ok) console.warn(`Failed uploading image ${i + 1}`);
        })
      );

      await Promise.all(
        sizes.map(async (size) => {
          if (size) {
            await fetch(
              "http://192.168.0.102:5000/api/manuplast/producttypesizes",
              {
                method: "POST",
                headers: { ...headers, "Content-Type": "application/json" },
                body: JSON.stringify({ producttype_id: productId, size }),
              }
            );
          }
        })
      );

      await Promise.all(
        colors.map(async (color) => {
          if (color) {
            await fetch(
              "http://192.168.0.102:5000/api/manuplast/producttypecolors",
              {
                method: "POST",
                headers: { ...headers, "Content-Type": "application/json" },
                body: JSON.stringify({ producttype_id: productId, color }),
              }
            );
          }
        })
      );

      alert("Product added successfully!");
      document.getElementById("add-product-modal")?.classList.add("hidden");
      fetchProductsList();
    } catch (error) {
      console.error("Error adding product:", error);
      alert(`Failed to add product: ${error.message}`);
    } finally {
      const submitBtn = document.querySelector(
        "#add-product-form button[type=submit]"
      );
      submitBtn.disabled = false;
      submitBtn.textContent = "Add Product";
    }
  });

document
  .getElementById("update-product-form")
  ?.addEventListener("submit", async function (e) {
    e.preventDefault();

    const headers = getHeaders();
    if (!headers.Authorization) {
      console.warn("No authentication token found. Redirecting to login.");
      alert("You are not authenticated. Please log in.");
      window.location.href = "login.html";
      return;
    }

    const productId = document.getElementById("update-product-id")?.value;
    const name = document.getElementById("update-product-name")?.value?.trim();
    const description = document
      .getElementById("update-product-description")
      ?.value?.trim();
    const price = document.getElementById("update-product-price")?.value;
    const categoryId = document.getElementById(
      "update-product-category"
    )?.value;
    const imageInput = document.getElementById("update-product-images");
    const sizes = document
      .getElementById("update-product-sizes")
      ?.value.split(",")
      .map((s) => s.trim())
      .filter((s) => s);
    const colors = document
      .getElementById("update-product-colors")
      ?.value.split(",")
      .map((c) => c.trim())
      .filter((c) => c);
    const sizeIdsInput = document.getElementById("update-product-size-ids");
    const colorIdsInput = document.getElementById("update-product-color-ids");
    const imageIdsInput = document.getElementById("update-product-image-ids");
    const sizeIds = sizeIdsInput?.value
      ? sizeIdsInput.value
          .split(",")
          .map((id) => id.trim())
          .filter((id) => id)
      : [];
    const colorIds = colorIdsInput?.value
      ? colorIdsInput.value
          .split(",")
          .map((id) => id.trim())
          .filter((id) => id)
      : [];
    const imageIds = imageIdsInput?.value
      ? imageIdsInput.value
          .split(",")
          .map((id) => id.trim())
          .filter((id) => id)
      : [];

    if (!productId || !name || name.length < 2) {
      alert("Product name is required and must be at least 2 characters long");
      return;
    }
    if (!description || description.length < 10) {
      alert("Description is required and must be at least 10 characters long");
      return;
    }
    if (!price || isNaN(parseFloat(price)) || parseFloat(price) <= 0) {
      alert("Price must be a valid positive number");
      return;
    }
    if (!categoryId) {
      alert("Category is required");
      return;
    }
    if (imageInput?.files?.length) {
      for (let file of imageInput.files) {
        if (!isValidImage(file)) {
          alert("Invalid image type. Only JPEG, PNG, and GIF are allowed.");
          return;
        }
      }
    }

    try {
      const submitBtn = document.querySelector(
        "#update-product-form button[type=submit]"
      );
      submitBtn.disabled = true;
      submitBtn.textContent = "Updating...";

      // Update product details
      const formData = new FormData();
      formData.append("name", name);
      formData.append("description", description);
      formData.append("price", parseFloat(price));
      formData.append("category_id", categoryId);

      const productResponse = await fetch(
        `http://192.168.0.102:5000/api/manuplast/producttypes/${productId}`,
        {
          method: "PATCH",
          headers,
          body: formData,
        }
      );

      console.log("Update product response status:", productResponse.status);
      if (!productResponse.ok) {
        const errorData = await productResponse.json().catch(() => ({}));
        throw new Error(
          `Failed to update product: ${
            errorData.message || productResponse.statusText
          }`
        );
      }

      // Update sizes
      const existingSizes = sizeIds.map((id, index) => ({
        id,
        size: sizes[index] || "",
      }));
      const newSizes = sizes.slice(sizeIds.length);
      const sizesToDelete = sizeIds.slice(sizes.length);

      await Promise.all(
        existingSizes.map(async ({ id, size }) => {
          if (size) {
            const response = await fetch(
              `http://192.168.0.102:5000/api/manuplast/producttypesizes/${id}`,
              {
                method: "PATCH",
                headers: { ...headers, "Content-Type": "application/json" },
                body: JSON.stringify({ size }),
              }
            );
            if (!response.ok) console.warn(`Failed updating size ID ${id}`);
          }
        })
      );

      await Promise.all(
        newSizes.map(async (size) => {
          if (size) {
            await fetch(
              "http://192.168.0.102:5000/api/manuplast/producttypesizes",
              {
                method: "POST",
                headers: { ...headers, "Content-Type": "application/json" },
                body: JSON.stringify({ producttype_id: productId, size }),
              }
            );
          }
        })
      );

      await Promise.all(
        sizesToDelete.map(async (id) => {
          const response = await fetch(
            `http://192.168.0.102:5000/api/manuplast/producttypesizes/${id}`,
            {
              method: "DELETE",
              headers,
            }
          );
          if (!response.ok) console.warn(`Failed deleting size ID ${id}`);
        })
      );

      // Update colors
      const existingColors = colorIds.map((id, index) => ({
        id,
        color: colors[index] || "",
      }));
      const newColors = colors.slice(colorIds.length);
      const colorsToDelete = colorIds.slice(colors.length);

      await Promise.all(
        existingColors.map(async ({ id, color }) => {
          if (color) {
            const response = await fetch(
              `http://192.168.0.102:5000/api/manuplast/producttypecolors/${id}`,
              {
                method: "PATCH",
                headers: { ...headers, "Content-Type": "application/json" },
                body: JSON.stringify({ color }),
              }
            );
            if (!response.ok) console.warn(`Failed updating color ID ${id}`);
          }
        })
      );

      await Promise.all(
        newColors.map(async (color) => {
          if (color) {
            await fetch(
              "http://192.168.0.102:5000/api/manuplast/producttypecolors",
              {
                method: "POST",
                headers: { ...headers, "Content-Type": "application/json" },
                body: JSON.stringify({ producttype_id: productId, color }),
              }
            );
          }
        })
      );

      await Promise.all(
        colorsToDelete.map(async (id) => {
          const response = await fetch(
            `http://192.168.0.102:5000/api/manuplast/producttypecolors/${id}`,
            {
              method: "DELETE",
              headers,
            }
          );
          if (!response.ok) console.warn(`Failed deleting color ID ${id}`);
        })
      );

      // Update images
      if (imageInput?.files.length && Array.isArray(imageIds)) {
        const newUrls = await Promise.all(
          Array.from(imageInput.files).map(async (file, i) => {
            const imageForm = new FormData();
            imageForm.append("producttype_id", productId);
            imageForm.append("image", file);
            const imgResponse = await fetch(
              "http://192.168.0.102:5000/api/manuplast/producttypeimages",
              {
                method: "POST",
                headers,
                body: imageForm,
              }
            );
            if (!imgResponse.ok) {
              console.warn(`Failed uploading image ${i + 1}`);
              return null;
            }
            const imgData = await imgResponse.json();
            return imgData.image_url || null;
          })
        );

        const validUrls = newUrls.filter((url) => url !== null);
        console.log("New image URLs:", validUrls);

        if (validUrls.length > 0) {
          const imageUpdateResponse = await fetch(
            `http://192.168.0.102:5000/api/manuplast/producttypeimages/product/${productId}`,
            {
              method: "PATCH",
              headers: { ...headers, "Content-Type": "application/json" },
              body: JSON.stringify({ newUrls: validUrls }),
            }
          );
          if (!imageUpdateResponse.ok) {
            const errorData = await imageUpdateResponse
              .json()
              .catch(() => ({}));
            console.warn(
              `Failed updating images for product ID ${productId}: ${
                errorData.message || imageUpdateResponse.statusText
              }`
            );
          }
        }

        if (validUrls.length > 0 && imageIds.length > 0) {
          await Promise.all(
            imageIds.map(async (imageId) => {
              const response = await fetch(
                `http://192.168.0.102:5000/api/manuplast/producttypeimages/${imageId}`,
                {
                  method: "DELETE",
                  headers,
                }
              );
              if (!response.ok)
                console.warn(`Failed deleting image ID ${imageId}`);
            })
          );
        }
      }

      alert("Product updated successfully!");

      // Add slight delay to ensure backend syncs, then refresh product list
      await new Promise((resolve) => setTimeout(resolve, 500));
      console.log(
        `Refreshing product list after updating product ID: ${productId}`
      );
      await fetchProductsList();
      document.getElementById("update-product-modal")?.classList.add("hidden");
    } catch (error) {
      console.error("Error updating product:", error);
      alert(`Failed to update product: ${error.message}`);
    } finally {
      const submitBtn = document.querySelector(
        "#update-product-form button[type=submit]"
      );
      submitBtn.disabled = false;
      submitBtn.textContent = "Update Product";
    }
  });

// Initialize dashboard
document.addEventListener("DOMContentLoaded", () => {
  console.log("DOMContentLoaded fired");
  console.log("Current pathname:", window.location.pathname);

  const isDashboardPage =
    window.location.pathname
      .toLowerCase()
      .includes("dashboard-products.html") ||
    window.location.pathname.toLowerCase().includes("product-list.html") ||
    window.location.pathname === "/" ||
    window.location.pathname.toLowerCase().includes("dashboard") ||
    window.location.pathname.toLowerCase().includes("manu-plast");

  if (!isDashboardPage) {
    console.log("Not on a dashboard page, skipping initialization");
    return;
  }

  fetchProductsList("dashboard-products-list", "dashboard");
  loadCategoriesForUpdateModal();

  const closeAddModalBtn = document.getElementById("close-add-product-modal");
  const addModal = document.getElementById("add-product-modal");
  const closeUpdateModalBtn = document.getElementById(
    "close-update-product-modal"
  );
  const updateModal = document.getElementById("update-product-modal");
  const addProductBtn = document.getElementById("add-product-btn");

  if (closeAddModalBtn && addModal) {
    closeAddModalBtn.addEventListener("click", () => {
      addModal.classList.add("hidden");
      console.log("Add modal closed via button");
    });
    addModal.addEventListener("click", (e) => {
      if (e.target === addModal) {
        addModal.classList.add("hidden");
        console.log("Add modal closed by clicking outside");
      }
    });
  } else {
    console.error("Add modal or close button not found");
    alert("Error: Add product modal elements missing.");
  }

  if (closeUpdateModalBtn && updateModal) {
    closeUpdateModalBtn.addEventListener("click", () => {
      updateModal.classList.add("hidden");
      console.log("Update modal closed via button");
    });
    updateModal.addEventListener("click", (e) => {
      if (e.target === updateModal) {
        updateModal.classList.add("hidden");
        console.log("Update modal closed by clicking outside");
      }
    });
  } else {
    console.error("Update modal or close button not found");
    alert("Error: Update product modal elements missing.");
  }

  if (addProductBtn) {
    addProductBtn.addEventListener("click", () => {
      openAddProductModal();
      console.log("Add product button clicked");
    });
  } else {
    console.error("Add product button not found");
    alert("Error: Add product button missing.");
  }
});





<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Products Dashboard - Manu Plast</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
    />
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      .modal {
        transition: opacity 0.3s ease;
      }
      .modal-content {
        animation: modalFadeIn 0.3s ease;
      }
      @keyframes modalFadeIn {
        from {
          opacity: 0;
          transform: translateY(-20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      html,
      body {
        height: 100%;
      }
      .modal-content {
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      }
      .form-field {
        width: 100%;
        max-width: 18rem;
      }
    </style>
  </head>
  <body class="bg-gray-100 h-full">
    <div class="flex h-full">
      <!-- Sidebar -->
      <div class="md:w-64 h-full bg-white shadow-md">
        <special-sidebar class="h-full" aria-label="Product Filters"></special-sidebar>
      </div>

      <!-- Main Content Area -->
      <div class="flex-1 flex flex-col overflow-auto">
        <!-- Header -->
        <header class="bg-white shadow-sm">
          <div class="max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8 flex justify-between items-center">
            <h1 class="text-2xl font-bold text-gray-900">Products Management</h1>
            <button id="add-product-btn" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center">
              <i class="fas fa-plus mr-2"></i> Add Product
            </button>
          </div>
        </header>

        <!-- Main Content -->
        <main class="flex-1 p-6 overflow-auto">
          <div id="dashboard-products-list" class="space-y-4 max-w-7xl mx-auto">
            <!-- Products will be loaded here -->
          </div>
        </main>
      </div>
    </div>

    <!-- Add Product Modal -->
    <div id="add-product-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
      <div class="bg-white rounded-lg p-6 modal-content max-w-3xl mx-auto w-full">
        <div class="flex justify-between items-center mb-6">
          <h3 class="text-xl font-bold text-gray-800">Add New Product</h3>
          <button id="close-add-product-modal" class="text-gray-500 hover:text-gray-700">
            <i class="fas fa-times text-lg"></i>
          </button>
        </div>
        <form id="add-product-form" class="space-y-6">
          <input type="hidden" id="csrf-token" value="YOUR_CSRF_TOKEN_HERE" />
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
            <div class="form-field">
              <label for="add-product-name" class="block text-gray-700 font-medium mb-2 text-center">Product Name*</label>
              <input type="text" id="add-product-name" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required />
            </div>
            <div class="form-field">
              <label for="add-product-category" class="block text-gray-700 font-medium mb-2 text-center">Category*</label>
              <select id="add-product-category" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required>
                <option value="" disabled selected>Select Category</option>
              </select>
            </div>
            <div class="form-field">
              <label for="add-product-price" class="block text-gray-700 font-medium mb-2 text-center">Price*</label>
              <input type="number" step="0.01" id="add-product-price" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required />
            </div>
            <div class="form-field">
              <label for="add-product-images" class="block text-gray-700 font-medium mb-2 text-center">Product Images*</label>
              <input type="file" id="add-product-images" class="w-full p-3 border border-gray-300 rounded-lg file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200" accept="image/*" multiple required />
            </div>
            <div class="form-field">
              <label for="add-product-sizes" class="block text-gray-700 font-medium mb-2 text-center">Sizes (comma separated)</label>
              <input type="text" id="add-product-sizes" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., Small, Medium, Large" />
            </div>
            <div class="form-field">
              <label for="add-product-colors" class="block text-gray-700 font-medium mb-2 text-center">Colors (comma separated)</label>
              <input type="text" id="add-product-colors" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., Red, Blue, Green" />
            </div>
            <div class="col-span-1 sm:col-span-2 form-field">
              <label for="add-product-description" class="block text-gray-700 font-medium mb-2 text-center">Description*</label>
              <textarea id="add-product-description" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" rows="4" required></textarea>
            </div>
          </div>
          <div class="col-span-1 sm:col-span-2">
            <button type="submit" class="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors">
              Add Product
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Update Product Modal -->
   <!-- Update Product Modal -->
<div id="update-product-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white rounded-lg p-6 modal-content max-w-3xl mx-auto w-full">
    <div class="flex justify-between items-center mb-6">
      <h3 class="text-xl font-bold text-gray-800">Update Product</h3>
      <button id="close-update-product-modal" class="text-gray-500 hover:text-gray-700">
        <i class="fas fa-times text-lg"></i>
      </button>
    </div>
    <form id="update-product-form" class="space-y-6">
      <input type="hidden" id="csrf-token" value="YOUR_CSRF_TOKEN_HERE" />
      <input type="hidden" id="update-product-id" />
      <!-- Add these hidden inputs -->
      <input type="hidden" id="update-product-size-ids" name="sizeIds" />
      <input type="hidden" id="update-product-color-ids" name="colorIds" />
      <input type="hidden" id="update-product-image-ids" name="imageIds" />
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
        <div class="form-field">
          <label for="update-product-name" class="block text-gray-700 font-medium mb-2 text-center">Product Name*</label>
          <input type="text" id="update-product-name" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required />
        </div>
        <div class="form-field">
          <label for="update-product-category" class="block text-gray-700 font-medium mb-2 text-center">Category*</label>
          <select id="update-product-category" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required>
            <option value="" disabled selected>Select Category</option>
          </select>
        </div>
        <div class="form-field">
          <label for="update-product-price" class="block text-gray-700 font-medium mb-2 text-center">Price*</label>
          <input type="number" step="0.01" id="update-product-price" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required />
        </div>
        <div class="form-field">
          <label for="update-product-images" class="block text-gray-700 font-medium mb-2 text-center">Product Images</label>
          <input type="file" id="update-product-images" class="w-full p-3 border border-gray-300 rounded-lg file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200" accept="image/*" multiple />
          <div id="current-product-image-preview" class="mt-3 flex flex-wrap gap-2">
            <p class="text-sm text-gray-500 w-full text-center">Current Images:</p>
          </div>
        </div>
        <div class="form-field">
          <label for="update-product-sizes" class="block text-gray-700 font-medium mb-2 text-center">Sizes (comma separated)</label>
          <input type="text" id="update-product-sizes" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., Small, Medium, Large" />
        </div>
        <div class="form-field">
          <label for="update-product-colors" class="block text-gray-700 font-medium mb-2 text-center">Colors (comma separated)</label>
          <input type="text" id="update-product-colors" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., Red, Blue, Green" />
        </div>
        <div class="col-span-1 sm:col-span-2 form-field">
          <label for="update-product-description" class="block text-gray-700 font-medium mb-2 text-center">Description*</label>
          <textarea id="update-product-description" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" rows="4" required></textarea>
        </div>
      </div>
      <div class="col-span-1 sm:col-span-2">
        <button type="submit" class="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors">
          Update Product
        </button>
      </div>
    </form>
  </div>
</div>

    <script src="sidebar.js"></script>
    <script src="products-list.js"></script>
  </body>
</html>





















function populateForm(category) {
  const productIdInput = document.getElementById("product-id");
  const nameInput = document.getElementById("name");
  const imageInput = document.getElementById("image");
  const descriptionInput = document.getElementById("description");

  if (!productIdInput || !nameInput || !imageInput || !descriptionInput) {
    console.error("Form elements not found");
    alert("Error: Form elements are missing.");
    return;
  }

  productIdInput.value = category.id || "";
  nameInput.value = category.name || "";
  // Note: Cannot set file input value for security reasons; user must re-select image
  descriptionInput.value = category.description || "";

  const typesContainer = document.getElementById("types-container");
  if (!typesContainer) {
    console.error("types-container not found");
    alert("Error: Types container is missing.");
    return;
  }
  typesContainer.innerHTML = "";

  const token = localStorage.getItem("token");
  fetch(
    `http://192.168.0.102:5000/api/manuplast/producttypes?category_id=${category.id}`,
    {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    }
  )
    .then((response) => {
      if (!response.ok) {
        throw new Error(
          `Failed to fetch product types: ${response.status} ${response.statusText}`
        );
      }
      return response.json();
    })
    .then(async (productTypes) => {
      // Validate that all product types belong to the correct category
      const filteredProductTypes = Array.isArray(productTypes)
        ? productTypes.filter((type) => type.category_id === category.id)
        : [];
      if (productTypes.length !== filteredProductTypes.length) {
        console.warn(
          `Found ${
            productTypes.length - filteredProductTypes.length
          } product types with mismatched category_id in update form`
        );
      }

      // Process images, sizes, and colors for each product type
      for (const type of filteredProductTypes) {
        if (!type.id) {
          console.warn(`Product type missing ID:`, type);
          type.images = ["./images/placeholder.jpg"];
          type.sizes = [];
          type.colors = [];
          continue;
        }
        type.images = Array.isArray(type.images)
          ? type.images
              .filter((img) => img.producttype_id === type.id && img.image_url)
              .map((img) => img.image_url)
          : ["./images/placeholder.jpg"];
        type.sizes = Array.isArray(type.sizes)
          ? type.sizes
              .filter(
                (sizeObj) =>
                  typeof sizeObj.size === "string" && sizeObj.size.trim() !== ""
              )
              .map((sizeObj) => sizeObj.size)
          : [];
        type.colors = Array.isArray(type.colors)
          ? type.colors
              .filter(
                (colorObj) =>
                  typeof colorObj.color === "string" &&
                  colorObj.color.trim() !== ""
              )
              .map((colorObj) => colorObj.color)
          : [];
      }

      if (
        Array.isArray(filteredProductTypes) &&
        filteredProductTypes.length > 0
      ) {
        filteredProductTypes.forEach((type, index) => {
          const typeDiv = createTypeDiv(type, index);
          typesContainer.appendChild(typeDiv);
          addDynamicFieldListeners(typeDiv, index);
        });
      } else {
        const typeDiv = createTypeDiv({}, 0);
        typesContainer.appendChild(typeDiv);
        addDynamicFieldListeners(typeDiv, 0);
      }
    })
    .catch((error) => {
      console.error("Error fetching product types:", error);
      alert(`Failed to load product types: ${error.message}`);
    });
}

function createTypeDiv(type, index) {
  const typeDiv = document.createElement("div");
  typeDiv.className =
    "type-item space-y-4 border p-6 rounded-lg bg-gray-50 relative";
  typeDiv.innerHTML = `
    <div class="flex justify-between items-center">
      <h4 class="font-semibold text-lg text-gray-700">Product Type ${
        index + 1
      }</h4>
      <button type="button" class="remove-type text-red-500 text-2xl" aria-label="Remove Product Type">Ã—</button>
    </div>
    <div>
      <label for="type-name-${index}" class="block text-gray-700 font-medium mb-1">Type Name</label>
      <input type="text" id="type-name-${index}" class="type-name w-full p-3 border rounded-lg" value="${
    type.name || ""
  }" placeholder="Type Name" required>
    </div>
    <div>
      <label for="type-images-${index}" class="block text-gray-700 font-medium mb-1">Type Images (multiple allowed)</label>
      <input type="file" id="type-images-${index}" class="type-images w-full p-3 border rounded-lg" multiple accept="image/*" required aria-describedby="type-images-info-${index}">
      <p id="type-images-info-${index}" class="text-gray-500 text-sm mt-1">
        Previously uploaded images: ${
          Array.isArray(type.images) && type.images.length
            ? type.images.join(", ")
            : "None"
        }
      </p>
    </div>
    <div>
      <label for="type-description-${index}" class="block text-gray-700 font-medium mb-1">Type Description</label>
      <textarea id="type-description-${index}" class="type-description w-full p-3 border rounded-lg" placeholder="Type Description" required>${
    type.description || ""
  }</textarea>
    </div>
    <div>
      <label for="type-price-${index}" class="block text-gray-700 font-medium mb-1">Type Price</label>
      <input type="number" step="0.01" id="type-price-${index}" class="type-price w-full p-3 border rounded-lg" value="${
    type.price || ""
  }" placeholder="Type Price" required>
    </div>
    <div>
      <label class="block text-gray-700 font-medium mb-1">Sizes (comma separated)</label>
      <div class="type-sizes-container space-y-2" data-type-index="${index}">
        ${
          Array.isArray(type.sizes) && type.sizes.length
            ? type.sizes
                .map(
                  (size) => `
              <div class="flex items-center space-x-2">
                <input type="text" class="type-size w-full p-3 border rounded-lg" value="${size}" placeholder="Size (e.g., S, M, L)">
                <button type="button" class="remove-size text-red-500 text-xl" aria-label="Remove Size">Ã—</button>
              </div>
            `
                )
                .join("")
            : `
              <div class="flex items-center space-x-2">
                <input type="text" class="type-size w-full p-3 border rounded-lg" placeholder="Size (e.g., S, M, L)">
                <button type="button" class="remove-size text-red-500 text-xl" aria-label="Remove Size">Ã—</button>
              </div>
            `
        }
      </div>
      <button type="button" class="add-size-btn bg-gray-200 px-3 py-1 mt-2 rounded hover:bg-gray-300" data-type-index="${index}" aria-label="Add Another Size">
        + Add Size
      </button>
    </div>
    <div>
      <label class="block text-gray-700 font-medium mb-1">Colors (comma separated)</label>
      <div class="type-colors-container space-y-2" data-type-index="${index}">
        ${
          Array.isArray(type.colors) && type.colors.length
            ? type.colors
                .map(
                  (color) => `
              <div class="flex items-center space-x-2">
                <input type="text" class="type-color w-full p-3 border rounded-lg" value="${color}" placeholder="Color (e.g., Red, Blue)">
                <button type="button" class="remove-color text-red-500 text-xl" aria-label="Remove Color">Ã—</button>
              </div>
            `
                )
                .join("")
            : `
              <div class="flex items-center space-x-2">
                <input type="text" class="type-color w-full p-3 border rounded-lg" placeholder="Color (e.g., Red, Blue)">
                <button type="button" class="remove-color text-red-500 text-xl" aria-label="Remove Color">Ã—</button>
              </div>
            `
        }
      </div>
      <button type="button" class="add-color-btn bg-gray-200 px-3 py-1 mt-2 rounded hover:bg-gray-300" data-type-index="${index}" aria-label="Add Another Color">
        + Add Color
      </button>
    </div>
  `;
  return typeDiv;
}

function addDynamicFieldListeners(typeDiv, typeIndex) {
  const removeTypeBtn = typeDiv.querySelector(".remove-type");
  if (removeTypeBtn) {
    removeTypeBtn.addEventListener("click", () => {
      typeDiv.remove();
    });
  }

  const addSizeBtn = typeDiv.querySelector(".add-size-btn");
  if (addSizeBtn) {
    addSizeBtn.addEventListener("click", () => {
      const sizesContainer = typeDiv.querySelector(
        `.type-sizes-container[data-type-index="${typeIndex}"]`
      );
      const sizeDiv = document.createElement("div");
      sizeDiv.className = "flex items-center space-x-2";
      sizeDiv.innerHTML = `
        <input type="text" class="type-size w-full p-3 border rounded-lg" placeholder="Size (e.g., S, M, L)">
        <button type="button" class="remove-size text-red-500 text-xl" aria-label="Remove Size">Ã—</button>
      `;
      sizesContainer.appendChild(sizeDiv);
      sizeDiv.querySelector(".remove-size").addEventListener("click", () => {
        if (sizesContainer.children.length > 1) {
          sizesContainer.removeChild(sizeDiv);
        }
      });
    });
  }

  const addColorBtn = typeDiv.querySelector(".add-color-btn");
  if (addColorBtn) {
    addColorBtn.addEventListener("click", () => {
      const colorsContainer = typeDiv.querySelector(
        `.type-colors-container[data-type-index="${typeIndex}"]`
      );
      const colorDiv = document.createElement("div");
      colorDiv.className = "flex items-center space-x-2";
      colorDiv.innerHTML = `
        <input type="text" class="type-color w-full p-3 border rounded-lg" placeholder="Color (e.g., Red, Blue)">
        <button type="button" class="remove-color text-red-500 text-xl" aria-label="Remove Color">Ã—</button>
      `;
      colorsContainer.appendChild(colorDiv);
      colorDiv.querySelector(".remove-color").addEventListener("click", () => {
        if (colorsContainer.children.length > 1) {
          colorsContainer.removeChild(colorDiv);
        }
      });
    });
  }

  typeDiv.querySelectorAll(".remove-size").forEach((btn) => {
    btn.addEventListener("click", () => {
      const container = btn.parentElement.parentElement;
      if (container.children.length > 1) {
        container.removeChild(btn.parentElement);
      }
    });
  });

  typeDiv.querySelectorAll(".remove-color").forEach((btn) => {
    btn.addEventListener("click", () => {
      const container = btn.parentElement.parentElement;
      if (container.children.length > 1) {
        container.removeChild(btn.parentElement);
      }
    });
  });
}

document.getElementById("add-type-button")?.addEventListener("click", () => {
  const typesContainer = document.getElementById("types-container");
  if (!typesContainer) {
    console.error("types-container not found");
    return;
  }
  const typeCount = typesContainer.querySelectorAll(".type-item").length;
  const typeDiv = createTypeDiv({}, typeCount);
  typesContainer.appendChild(typeDiv);
  addDynamicFieldListeners(typeDiv, typeCount);
});
















// Base API URL
const API_BASE_URL = "http://192.168.0.102:5000/api/manuplast"; // Verify this matches your backend API

// DOM Elements
const dashboardProductsList = document.getElementById("dashboard-products-list");

// Add Product Modal Elements
const addProductBtn = document.getElementById("add-product-btn");
const addProductModal = document.getElementById("add-product-modal");
const closeAddProductModalBtn = document.getElementById("close-add-product-modal");
const addProductForm = document.getElementById("add-product-form");
const addProductNameInput = document.getElementById("add-product-name");
const addProductCategorySelect = document.getElementById("add-product-category");
const addProductPriceInput = document.getElementById("add-product-price");
const addProductSizesInput = document.getElementById("add-product-sizes");
const addProductDescriptionInput = document.getElementById("add-product-description");
const addProductDetailedDescriptionInput = document.getElementById("add-product-detailed-description");
const addColorImageInputsContainer = document.getElementById("add-color-image-inputs");
const addNewColorFieldBtn = document.getElementById("add-new-color-field-btn");

// Update Product Modal Elements
const updateProductModal = document.getElementById("update-product-modal");
const closeUpdateProductModalBtn = document.getElementById("close-update-product-modal");
const updateProductForm = document.getElementById("update-product-form");
const updateProductIdInput = document.getElementById("update-product-id");
const updateProductNameInput = document.getElementById("update-product-name");
const updateProductCategorySelect = document.getElementById("update-product-category");
const updateProductPriceInput = document.getElementById("update-product-price");
const updateProductSizesInput = document.getElementById("update-product-sizes");
const updateProductDescriptionInput = document.getElementById("update-product-description");
const updateProductDetailedDescriptionInput = document.getElementById("update-product-detailed-description");
const updateColorImageInputsContainer = document.getElementById("update-color-image-inputs");
const updateAddNewColorFieldBtn = document.getElementById("update-add-new-color-field-btn");

// Product Details Modal Elements
const productDetailsModal = document.getElementById("product-details-modal");
const closeProductDetailsModalBtn = document.getElementById("close-product-details-modal");
const detailProductName = document.getElementById("detail-product-name");
const detailProductCategory = document.getElementById("detail-product-category");
const detailProductPrice = document.getElementById("detail-product-price");
const detailProductDescription = document.getElementById("detail-product-description");
const detailProductStatus = document.getElementById("detail-product-status");
const detailProductSizes = document.getElementById("detail-product-sizes");
const detailProductColors = document.getElementById("detail-product-colors");
const detailProductDetailedDescription = document.getElementById("detail-product-detailed-description");

let allCategories = []; // To store fetched categories

// --- Helper Functions ---

// Generate a unique ID for dynamic elements
const generateUniqueId = () => `input-${Date.now()}-${Math.floor(Math.random() * 1000)}`;

// Create a color/image input row
function createColorImageInputRow(containerId, colorName = '', images = [], isExisting = false) {
  const rowId = generateUniqueId();
  const rowDiv = document.createElement('div');
  rowDiv.className = 'border border-gray-300 p-3 rounded-lg bg-white relative';
  rowDiv.id = rowId;
  rowDiv.dataset.isExisting = isExisting;

  rowDiv.innerHTML = `
        <div class="flex items-center mb-3">
            <input type="text" class="color-input w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Color Name" value="${colorName}" required />
            <button type="button" class="remove-color-btn ml-3 bg-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center hover:bg-red-600">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <label class="block text-gray-700 font-medium mb-2">Images for this color:</label>
        <input type="file" class="color-image-input w-full p-2 border border-gray-300 rounded-lg file:mr-4 file:py-1 file:px-3 file:rounded file:border-0 file:bg-blue-100 file:text-blue-700 hover:file:bg-blue-200" accept="image/*" multiple />
        <div class="image-preview-container mt-2">
            ${images.map(img => `
                <div class="image-preview-item" data-image-url="${img.image_url || img.url || ''}" data-is-existing="true">
                    <img src="${img.image_url || img.url}" alt="Image Preview" />
                    <button type="button" class="remove-image-btn"><i class="fas fa-times"></i></button>
                </div>
            `).join('')}
        </div>
    `;

  const container = document.getElementById(containerId);
  container.appendChild(rowDiv);

  const removeColorBtn = rowDiv.querySelector('.remove-color-btn');
  removeColorBtn.addEventListener('click', () => {
    rowDiv.remove();
  });

  const colorImageInput = rowDiv.querySelector('.color-image-input');
  const imagePreviewContainer = rowDiv.querySelector('.image-preview-container');

  colorImageInput.addEventListener('change', (event) => {
    Array.from(event.target.files).forEach(file => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const previewItem = document.createElement('div');
        previewItem.className = 'image-preview-item';
        previewItem.dataset.isExisting = 'false';
        previewItem.innerHTML = `
                        <img src="${e.target.result}" alt="Image Preview" />
                        <button type="button" class="remove-image-btn"><i class="fas fa-times"></i></button>
                    `;
        imagePreviewContainer.appendChild(previewItem);
        // Store the File object in a data attribute as a base64 string to avoid serialization issues
        previewItem.dataset.fileBase64 = e.target.result;
        previewItem.dataset.fileName = file.name;
        previewItem.dataset.fileType = file.type;

        previewItem.querySelector('.remove-image-btn').addEventListener('click', () => {
          previewItem.remove();
        });
      };
      reader.readAsDataURL(file);
    });
  });

  rowDiv.querySelectorAll('.remove-image-btn').forEach(btn => {
    btn.addEventListener('click', (event) => {
      event.target.closest('.image-preview-item').remove();
    });
  });

  return rowDiv;
}

// --- Modal Open/Close Functions ---

function openModal(modalElement) {
  modalElement.classList.remove("hidden");
  setTimeout(() => (modalElement.style.opacity = "1"), 10);
}

function closeModal(modalElement) {
  modalElement.style.opacity = "0";
  setTimeout(() => modalElement.classList.add("hidden"), 300);
}

// --- Category Loading ---
async function populateCategories(selectElement, selectedCategoryId = null) {
  try {
    const response = await fetch(`${API_BASE_URL}/categories`, {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('authToken') || 'YOUR_TOKEN_HERE'}`,
      },
    });
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    allCategories = await response.json();
    selectElement.innerHTML = '<option value="" disabled selected>Select Category</option>';

    allCategories.forEach((category) => {
      const option = document.createElement("option");
      option.value = category.id;
      option.textContent = category.name;
      if (selectedCategoryId && category.id === selectedCategoryId) {
        option.selected = true;
      }
      selectElement.appendChild(option);
    });
  } catch (error) {
    console.error("Error loading categories:", error);
    alert("Failed to load categories. Please try again.");
  }
}

// --- Product Display and Management ---

async function loadProducts() {
  dashboardProductsList.innerHTML = `
        <div class="flex justify-center items-center h-48">
            <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500"></div>
        </div>
        <p class="text-center text-gray-600 mt-4">Loading products...</p>
    `;
  try {
    const response = await fetch(`${API_BASE_URL}/producttypes`, {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('authToken') || 'YOUR_TOKEN_HERE'}`,
      },
    });
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const products = await response.json();
    dashboardProductsList.innerHTML = "";

    if (products.length === 0) {
      dashboardProductsList.innerHTML = `
            <div class="text-center p-8 bg-white rounded-lg shadow-md">
                <p class="text-gray-600 text-lg">No products found. Add a new product to get started!</p>
            </div>
        `;
      return;
    }

    products.forEach((product) => {
      dashboardProductsList.appendChild(createProductCard(product));
    });
  } catch (error) {
    console.error("Error loading products:", error);
    dashboardProductsList.innerHTML = `
        <div class="text-center p-8 bg-red-100 text-red-700 rounded-lg shadow-md">
            <p class="text-lg">Failed to load products: ${error.message}</p>
            <p class="text-sm mt-2">Please check your network connection or API server.</p>
        </div>
      `;
  }
}

function createProductCard(product) {
  const card = document.createElement("div");
  card.className = "bg-white rounded-lg shadow-md p-6 flex flex-col sm:flex-row items-center gap-4";
  card.dataset.productId = product.id;

  let mainImageUrl = "https://via.placeholder.com/100x100?text=No+Image";
  if (product.colors && product.colors.length > 0) {
    for (const color of product.colors) {
      if (color.images && color.images.length > 0) {
        mainImageUrl = color.images[0].image_url;
        break;
      }
    }
  }

  const sizesText = product.sizes && product.sizes.length > 0
    ? product.sizes.map(s => s.size).join(", ")
    : "N/A";

  const colorsText = product.colors && product.colors.length > 0
    ? product.colors.map(c => c.color).join(", ")
    : "N/A";

  card.innerHTML = `
        <img src="${mainImageUrl}" alt="${product.name}" class="w-24 h-24 object-cover rounded-lg flex-shrink-0" />
        <div class="flex-1 text-center sm:text-left">
            <h3 class="text-xl font-semibold text-gray-800">${product.name}</h3>
            <p class="text-gray-600 text-sm">Category: ${product.category ? product.category.name : 'N/A'}</p>
            <p class="text-gray-700 font-bold mt-1">Price: ${product.price ? product.price.toFixed(2) : '0.00'}</p>
            <p class="text-gray-600 text-sm">Sizes: ${sizesText}</p>
            <p class="text-gray-600 text-sm">Colors: ${colorsText}</p>
        </div>
        <div class="flex flex-col sm:flex-row gap-2 mt-4 sm:mt-0">
            <button class="view-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300">
                <i class="fas fa-eye"></i> View
            </button>
            <button class="edit-btn bg-yellow-500 text-white px-4 py-2 rounded-lg hover:bg-yellow-600">
                <i class="fas fa-edit"></i> Edit
            </button>
            <button class="delete-btn bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600">
                <i class="fas fa-trash"></i> Delete
            </button>
            <button class="toggle-status-btn bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 ${product.status === 'ACTIVE' ? 'opacity-100' : 'opacity-70'}">
                <i class="fas fa-toggle-${product.status === 'ACTIVE' ? 'on' : 'off'}"></i> ${product.status === 'ACTIVE' ? 'Active' : 'Inactive'}
            </button>
        </div>
    `;

  card.querySelector(".view-btn").addEventListener("click", () => openProductDetailsModal(product));
  card.querySelector(".edit-btn").addEventListener("click", () => openUpdateProductModal(product.id));
  card.querySelector(".delete-btn").addEventListener("click", () => deleteProduct(product.id, product.name));
  card.querySelector(".toggle-status-btn").addEventListener("click", () => toggleProductStatus(product.id, product.status));

  return card;
}

// --- Add Product Logic ---

addProductBtn.addEventListener("click", () => {
  addProductForm.reset();
  addColorImageInputsContainer.innerHTML = '';
  createColorImageInputRow('add-color-image-inputs');
  addProductDetailedDescriptionInput.value = '{"features": [], "specifications": []}';
  populateCategories(addProductCategorySelect);
  openModal(addProductModal);
});

closeAddProductModalBtn.addEventListener("click", () => closeModal(addProductModal));

addNewColorFieldBtn.addEventListener('click', () => {
  createColorImageInputRow('add-color-image-inputs');
});

addProductForm.addEventListener("submit", async (event) => {
  event.preventDefault();

  const formData = new FormData();
  formData.append("name", addProductNameInput.value);
  formData.append("description", addProductDescriptionInput.value);
  formData.append("price", addProductPriceInput.value);
  formData.append("category_id", addProductCategorySelect.value);

  const sizesValue = addProductSizesInput.value.trim();
  if (sizesValue) {
    formData.append("sizes", JSON.stringify(sizesValue.split(",").map(s => s.trim()).filter(s => s)));
  } else {
    formData.append("sizes", "[]");
  }

  try {
    const detailedDescription = JSON.parse(addProductDetailedDescriptionInput.value);
    formData.append("detailed_description", JSON.stringify(detailedDescription));
  } catch (error) {
    alert("Invalid JSON in Detailed Description. Please provide valid JSON.");
    return;
  }

  const colorsData = [];
  const allFilesForUpload = [];

  const colorRows = addColorImageInputsContainer.querySelectorAll('.border.border-gray-300.p-3.rounded-lg.bg-white.relative');

  if (colorRows.length === 0) {
    alert("Please add at least one color.");
    return;
  }

  for (const row of colorRows) {
    const colorInput = row.querySelector('.color-input');
    const fileInput = row.querySelector('.color-image-input');

    const colorName = colorInput.value.trim();
    if (!colorName) {
      alert("All color names must be provided.");
      return;
    }

    const imageIndices = [];

    Array.from(fileInput.files).forEach(file => {
      const fileIndex = allFilesForUpload.push(file) - 1;
      imageIndices.push(fileIndex);
    });

    colorsData.push({
      color: colorName,
      imageIndices: imageIndices
    });
  }

  formData.append("colors", JSON.stringify(colorsData));

  allFilesForUpload.forEach(file => {
    formData.append("images", file);
  });

  try {
    const response = await fetch(`${API_BASE_URL}/producttypes`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${localStorage.getItem('authToken') || 'YOUR_TOKEN_HERE'}`,
      },
      body: formData,
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
    }

    alert("Product added successfully!");
    closeModal(addProductModal);
    loadProducts();
  } catch (error) {
    console.error("Error adding product:", error);
    alert(`Failed to add product: ${error.message}`);
  }
});

// --- Update Product Logic ---

async function openUpdateProductModal(productId) {
  try {
    const response = await fetch(`${API_BASE_URL}/producttypes/${productId}`, {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('authToken') || 'YOUR_TOKEN_HERE'}`,
      },
    });
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const product = await response.json();

    updateProductIdInput.value = product.id;
    updateProductNameInput.value = product.name;
    updateProductDescriptionInput.value = product.description;
    updateProductPriceInput.value = product.price;
    updateProductDetailedDescriptionInput.value = product.detailed_description ? JSON.stringify(product.detailed_description, null, 2) : '{"features": [], "specifications": []}';

    await populateCategories(updateProductCategorySelect, product.category_id);

    const sizes = product.sizes ? product.sizes.map(s => s.size).join(", ") : "";
    updateProductSizesInput.value = sizes;

    updateColorImageInputsContainer.innerHTML = '';

    if (product.colors && product.colors.length > 0) {
      product.colors.forEach(color => {
        createColorImageInputRow('update-color-image-inputs', color.color, color.images, true);
      });
    } else {
      createColorImageInputRow('update-color-image-inputs');
    }

    openModal(updateProductModal);
  } catch (error) {
    console.error("Error fetching product for update:", error);
    alert("Failed to load product details for update.");
  }
}

closeUpdateProductModalBtn.addEventListener("click", () => closeModal(updateProductModal));

updateAddNewColorFieldBtn.addEventListener('click', () => {
  createColorImageInputRow('update-color-image-inputs');
});

updateProductForm.addEventListener("submit", async (event) => {
  event.preventDefault();

  const productId = updateProductIdInput.value;
  const formData = new FormData();

  formData.append("name", updateProductNameInput.value);
  formData.append("description", updateProductDescriptionInput.value);
  formData.append("price", updateProductPriceInput.value);
  formData.append("category_id", updateProductCategorySelect.value);

  const sizesValue = updateProductSizesInput.value.trim();
  if (sizesValue) {
    formData.append("sizes", JSON.stringify(sizesValue.split(",").map(s => s.trim()).filter(s => s)));
  } else {
    formData.append("sizes", "[]");
  }

  try {
    const detailedDescription = JSON.parse(updateProductDetailedDescriptionInput.value);
    formData.append("detailed_description", JSON.stringify(detailedDescription));
  } catch (error) {
    alert("Invalid JSON in Detailed Description. Please provide valid JSON.");
    return;
  }

  const colorsData = [];
  const allFilesForUpload = [];

  const colorRows = updateColorImageInputsContainer.querySelectorAll('.border.border-gray-300.p-3.rounded-lg.bg-white.relative');

  if (colorRows.length === 0) {
    alert("Please add at least one color.");
    return;
  }

  for (const row of colorRows) {
    const colorInput = row.querySelector('.color-input');
    const fileInput = row.querySelector('.color-image-input');
    const previewItems = row.querySelectorAll('.image-preview-item');

    const colorName = colorInput.value.trim();
    if (!colorName) {
      alert("All color names must be provided.");
      return;
    }

    const imageIndices = [];

    // Process preview items (new images only, since existing images must be re-uploaded)
    previewItems.forEach(item => {
      if (item.dataset.isExisting === 'false' && item.dataset.fileBase64) {
        // Convert base64 back to a File object
        const byteString = atob(item.dataset.fileBase64.split(',')[1]);
        const mimeString = item.dataset.fileType;
        const ab = new ArrayBuffer(byteString.length);
        const ia = new Uint8Array(ab);
        for (let i = 0; i < byteString.length; i++) {
          ia[i] = byteString.charCodeAt(i);
        }
        const blob = new Blob([ab], { type: mimeString });
        const file = new File([blob], item.dataset.fileName, { type: mimeString });
        const fileIndex = allFilesForUpload.push(file) - 1;
        imageIndices.push(fileIndex);
      }
    });

    // Process new files from file input
    Array.from(fileInput.files).forEach(file => {
      if (!allFilesForUpload.some(existingFile => existingFile.name === file.name && existingFile.size === file.size)) {
        const fileIndex = allFilesForUpload.push(file) - 1;
        imageIndices.push(fileIndex);
      }
    });

    colorsData.push({
      color: colorName,
      imageIndices: imageIndices
    });
  }

  formData.append("colors", JSON.stringify(colorsData));

  allFilesForUpload.forEach(file => {
    formData.append("images", file);
  });

  try {
    const response = await fetch(`${API_BASE_URL}/producttypes/${productId}`, {
      method: "PATCH",
      headers: {
        Authorization: `Bearer ${localStorage.getItem('authToken') || 'YOUR_TOKEN_HERE'}`,
      },
      body: formData,
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
    }

    alert("Product updated successfully!");
    closeModal(updateProductModal);
    loadProducts();
  } catch (error) {
    console.error("Error updating product:", error);
    alert(`Failed to update product: ${error.message}`);
  }
});

// --- Delete Product Logic ---

async function deleteProduct(productId, productName) {
  if (!confirm(`Are you sure you want to delete product "${productName}"? This action cannot be undone.`)) {
    return;
  }
  try {
    const response = await fetch(`${API_BASE_URL}/producttypes/${productId}`, {
      method: "DELETE",
      headers: {
        Authorization: `Bearer ${localStorage.getItem('authToken') || 'YOUR_TOKEN_HERE'}`,
      },
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
    }

    alert(`Product "${productName}" deleted successfully!`);
    loadProducts();
  } catch (error) {
    console.error("Error deleting product:", error);
    alert(`Failed to delete product: ${error.message}`);
  }
}

// --- Toggle Status Logic ---

async function toggleProductStatus(productId, currentStatus) {
  const newStatus = currentStatus === "ACTIVE" ? false : true;
  const statusText = newStatus ? "activate" : "deactivate";
  if (!confirm(`Are you sure you want to ${statusText} this product?`)) {
    return;
  }

  try {
    const response = await fetch(`${API_BASE_URL}/producttypes/${productId}/status`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.getItem('authToken') || 'YOUR_TOKEN_HERE'}`,
      },
      body: JSON.stringify({
        active: newStatus
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
    }

    alert(`Product status changed to ${newStatus ? 'ACTIVE' : 'INACTIVE'} successfully!`);
    loadProducts();
  } catch (error) {
    console.error("Error changing product status:", error);
    alert(`Failed to change product status: ${error.message}`);
  }
}

// --- Product Details Modal Logic ---

function openProductDetailsModal(product) {
  detailProductName.textContent = product.name;
  detailProductCategory.textContent = product.category ? product.category.name : 'N/A';
  detailProductPrice.textContent = product.price ? product.price.toFixed(2) : '0.00';
  detailProductDescription.textContent = product.description;
  detailProductStatus.textContent = product.status;
  detailProductSizes.textContent = product.sizes && product.sizes.length > 0
    ? product.sizes.map(s => s.size).join(", ")
    : "N/A";

  detailProductColors.innerHTML = '';

  if (product.colors && product.colors.length > 0) {
    product.colors.forEach(color => {
      const colorDiv = document.createElement('div');
      colorDiv.className = 'bg-gray-100 p-2 rounded-md';
      colorDiv.innerHTML = `<p class="font-semibold">${color.color}:</p>`;

      if (color.images && color.images.length > 0) {
        const imageContainer = document.createElement('div');
        imageContainer.className = 'flex flex-wrap gap-2 mt-1';
        color.images.forEach(image => {
          const imgElement = document.createElement('img');
          imgElement.src = image.image_url;
          imgElement.alt = `Image for ${color.color}`;
          imgElement.className = 'w-20 h-20 object-cover rounded-md shadow-sm';
          imageContainer.appendChild(imgElement);
        });
        colorDiv.appendChild(imageContainer);
      } else {
        const noImageText = document.createElement('p');
        noImageText.className = 'text-sm text-gray-500 italic';
        noImageText.textContent = 'No images for this color.';
        colorDiv.appendChild(noImageText);
      }
      detailProductColors.appendChild(colorDiv);
    });
  } else {
    detailProductColors.innerHTML = '<p class="text-gray-500 italic">No colors available.</p>';
  }

  detailProductDetailedDescription.innerHTML = '';
  if (product.detailed_description) {
    const detailedDescription = product.detailed_description;
    const detailsDiv = document.createElement('div');
    detailsDiv.className = 'bg-gray-100 p-2 rounded-md';

    if (detailedDescription.features && detailedDescription.features.length > 0) {
      const featuresHeader = document.createElement('p');
      featuresHeader.className = 'font-semibold';
      featuresHeader.textContent = 'Features:';
      detailsDiv.appendChild(featuresHeader);

      const featuresList = document.createElement('ul');
      featuresList.className = 'list-disc pl-5';
      detailedDescription.features.forEach(feature => {
        const featureItem = document.createElement('li');
        featureItem.textContent = feature;
        featuresList.appendChild(featureItem);
      });
      detailsDiv.appendChild(featuresList);
    }

    if (detailedDescription.specifications && detailedDescription.specifications.length > 0) {
      const specsHeader = document.createElement('p');
      specsHeader.className = 'font-semibold mt-2';
      specsHeader.textContent = 'Specifications:';
      detailsDiv.appendChild(specsHeader);

      detailedDescription.specifications.forEach(spec => {
        const specDiv = document.createElement('div');
        specDiv.className = 'ml-2 mt-1';
        specDiv.innerHTML = `
          <p><strong>Color:</strong> ${spec.color}</p>
          <p><strong>Material:</strong> ${spec.material}</p>
          <p><strong>Capacity:</strong> ${spec.capacity}</p>
          <p><strong>Package Content:</strong> ${spec.package_content}</p>
          <p><strong>Dimensions (cm):</strong> ${spec.dimensions_cm}</p>
        `;
        detailsDiv.appendChild(specDiv);
      });
    }

    detailProductDetailedDescription.appendChild(detailsDiv);
  } else {
    detailProductDetailedDescription.innerHTML = '<p class="text-gray-500 italic">No detailed description available.</p>';
  }

  openModal(productDetailsModal);
}

closeProductDetailsModalBtn.addEventListener('click', () => closeModal(productDetailsModal));

// --- Initial Load ---
document.addEventListener("DOMContentLoaded", () => {
  loadProducts();
});



















class ProductDetailManager {
  constructor() {
    this.currentImageIndex = 0;
    this.currentSelectedColorIndex = 0;
    this.imageViewMode = "gallery";
    this.product = null;
    this.isLoading = false;
    this.activeTab = "description";
    this.relatedProducts = [];
    this.init();
  }

  init() {
    this.fetchProductDetail();
    this.setupEventListeners();
  }

  setupEventListeners() {
    document.addEventListener("keydown", (e) =>
      this.handleKeyboardNavigation(e)
    );
    window.addEventListener("resize", () => this.handleWindowResize());
  }

  async fetchProductDetail() {
    const typeDetail = document.getElementById("type-detail");
    if (!typeDetail) return;

    const params = new URLSearchParams(window.location.search);
    const typeId = params.get("id");
    const categoryId = params.get("category_id");

    if (!typeId || !categoryId) {
      this.renderError("Product not found. Invalid product ID or category.");
      return;
    }

    this.showLoadingState();
    this.isLoading = true;

    try {
      const token = this.getAuthToken();
      const headers = token ? { Authorization: `Bearer ${token}` } : {};

      // Fetch product details
      const productResponse = await fetch(
        `https://api.vybtek.com/api/manuplast/producttypes/${typeId}`,
        { headers, timeout: 10000 }
      );
      if (!productResponse.ok) {
        throw new Error(
          `API Error: ${productResponse.status} ${productResponse.statusText}`
        );
      }
      const product = await productResponse.json();

      if (!this.validateProduct(product, categoryId)) {
        this.renderError(
          "This product does not belong to the specified category."
        );
        return;
      }

      // Fetch related products
      const relatedResponse = await fetch(
        `https://api.vybtek.com/api/manuplast/producttypes?category_id=${categoryId}`,
        { headers, timeout: 10000 }
      );
      if (!relatedResponse.ok) {
        throw new Error(
          `Failed to fetch related products: ${relatedResponse.status}`
        );
      }
      const relatedProducts = await relatedResponse.json();

      this.product = this.processProductData(product);
      this.relatedProducts = this.processRelatedProducts(
        relatedProducts,
        typeId
      );
      this.renderProductDetail();
      this.initializeInteractions();
      this.trackProductView();
    } catch (error) {
      console.error("Error loading product:", error);
      this.renderError(`Failed to load product: ${error.message}`);
    } finally {
      this.isLoading = false;
    }
  }

  getAuthToken() {
    try {
      return localStorage.getItem("token");
    } catch (error) {
      console.warn("Could not access localStorage for token");
      return null;
    }
  }

  validateProduct(product, expectedCategoryId) {
    const productCategoryId = String(product.category_id);
    const categoryId = String(expectedCategoryId);
    return productCategoryId === categoryId;
  }

  processProductData(rawProduct) {
    const processedProduct = {
      ...rawProduct,
      sizes: this.processSizes(rawProduct.sizes),
      colors: this.processColorsWithImages(rawProduct.colors),
      price: this.formatPrice(rawProduct.price),
      rating: this.calculateRating(rawProduct.reviews),
      availability: this.checkAvailability(rawProduct.stock),
      description: rawProduct.description || "No description available",
      features:
        Array.isArray(rawProduct.detailed_description?.features) &&
        rawProduct.detailed_description.features.length
          ? rawProduct.detailed_description.features
          : [
 "No features available"
            ],
      specifications:
        Array.isArray(rawProduct.detailed_description?.specifications) &&
        rawProduct.detailed_description.specifications.length
          ? rawProduct.detailed_description.specifications.map((spec) => ({
              key: "Color",
              value: spec.color,
            }, {
              key: "Capacity",
              value: spec.capacity,
            }, {
              key: "Material",
              value: spec.material,
            }, {
              key: "Dimensions",
              value: spec.dimensions_cm,
            }, {
              key: "Package Content",
              value: spec.package_content,
            })).flat().filter(spec => spec.value)
          : [
              { key: "Material", value: "Premium Synthetic Fabric" },
              { key: "Weight", value: "1.2 kg" },
              { key: "Dimensions", value: "30 x 20 x 10 cm" },
              { key: "Warranty", value: "2 Years" },
              {
                key: "Color Options",
                value: rawProduct.colors?.length || "Multiple",
              },
            ],
    };

    processedProduct.displayImages =
      processedProduct.colors.length > 0
        ? processedProduct.colors[this.currentSelectedColorIndex].images
        : ["./images/placeholder.jpg"];

    return processedProduct;
  }

  processRelatedProducts(productTypes, currentTypeId) {
    if (!Array.isArray(productTypes)) return [];

    return productTypes
      .filter((type) => String(type.id) !== String(currentTypeId))
      .map((type) => ({
        ...type,
        images: Array.isArray(type.colors)
          ? type.colors.flatMap((color) =>
              Array.isArray(color.images)
                ? color.images.map((img) => img.image_url).filter(Boolean)
                : []
            )
          : ["./images/placeholder.jpg"],
        sizes: Array.isArray(type.sizes)
          ? type.sizes
              .map((s) => (typeof s === "string" ? s : s.size))
              .filter(Boolean)
          : [],
        colors: Array.isArray(type.colors)
          ? type.colors
              .map((c) => (typeof c === "string" ? c : c.color))
              .filter(Boolean)
          : [],
      }))
      .slice(0, 6);
  }

  processColorsWithImages(colors) {
    if (!Array.isArray(colors)) return [];

    return colors
      .map((colorObj) => {
        const colorName =
          typeof colorObj === "string" ? colorObj : colorObj?.color;
        const rawImages = colorObj?.images || [];

        const processedImages = rawImages
          .map((img) => (typeof img === "string" ? img : img?.image_url))
          .filter((url) => url && typeof url === "string" && url.trim() !== "")
          .map((url) => (url.startsWith("http") ? url : `./images/${url}`));

        return {
          name: colorName,
          hex: this.getColorHex(colorName),
          textColor: this.getTextColor(colorName),
          images:
            processedImages.length > 0
              ? processedImages
              : ["./images/placeholder.jpg"],
        };
      })
      .filter((color) => color.name);
  }

  processSizes(sizes) {
    if (!Array.isArray(sizes)) return [];

    return sizes
      .map((size) => (typeof size === "string" ? size : size?.size))
      .filter((size) => size && typeof size === "string" && size.trim() !== "")
      .sort((a, b) => {
        const sizeOrder = ["XS", "S", "M", "L", "XL", "XXL"];
        return sizeOrder.indexOf(a) - sizeOrder.indexOf(b);
      });
  }

  getColorHex(colorName) {
    const colorMap = {
      red: "#ef4444",
      blue: "#3b82f6",
      green: "#10b981",
      yellow: "#f59e0b",
      black: "#000000",
      white: "#ffffff",
      gray: "#6b7280",
      pink: "#ec4899",
      purple: "#8b5cf6",
      orange: "#f97316",
      beige: "#f5f5dc"
    };
    return colorMap[colorName.toLowerCase()] || "#6b7280";
  }

  getTextColor(colorName) {
    const lightColors = ["white", "yellow", "lightgray", "pink", "orange", "beige"];
    return lightColors.includes(colorName.toLowerCase())
      ? "#000000"
      : "#ffffff";
  }

  formatPrice(price) {
    if (!price) return "N/A";
    return new Intl.NumberFormat("en-IN", {
      style: "currency",
      currency: "INR",
      minimumFractionDigits: 0,
    }).format(price);
  }

  calculateRating(reviews) {
    if (!Array.isArray(reviews) || reviews.length === 0) return 0;
    const total = reviews.reduce(
      (sum, review) => sum + (review.rating || 0),
      0
    );
    return Math.round((total / reviews.length) * 10) / 10;
  }

  checkAvailability(stock) {
    if (!stock || stock === 0) return "in-stock";
    if (stock < 10) return "low-stock";
    return "in-stock";
  }

  showLoadingState() {
    const typeDetail = document.getElementById("type-detail");
    typeDetail.innerHTML = `
      <div class="animate-pulse">
        <div class="bg-white rounded-2xl p-8 shadow-xl">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
            <div class="space-y-4">
              <div class="bg-gray-300 h-96 rounded-xl"></div>
              <div class="flex space-x-2">
                ${Array(4)
                  .fill()
                  .map(
                    () => '<div class="bg-gray-300 w-16 h-16 rounded-lg"></div>'
                  )
                  .join("")}
              </div>
            </div>
            <div class="space-y-6">
              <div class="bg-gray-300 h-8 rounded"></div>
              <div class="bg-gray-300 h-6 w-1/2 rounded"></div>
              <div class="bg-gray-300 h-20 rounded"></div>
              <div class="bg-gray-300 h-12 w-1/3 rounded"></div>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  renderProductDetail() {
    const typeDetail = document.getElementById("type-detail");
    const product = this.product;

    typeDetail.innerHTML = `
      <div class="bg-white rounded-2xl shadow-2xl overflow-hidden animate-slide-in">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-0">
          <div id="image-gallery-section" class="p-8 bg-gradient-to-br from-gray-50 to-gray-100">
            ${this.renderImageGallery()}
          </div>
          <div id="product-info-section" class="p-8 sticky top-20">
            ${this.renderProductInfo()}
          </div>
        </div>
        <div class="border-t border-gray-200 p-8 bg-gray-50">
          ${this.renderAdditionalDetails()}
        </div>
        <div class="p-8">
          ${this.renderRelatedProducts()}
        </div>
      </div>
    `;
  }

  renderImageGallery() {
    const product = this.product;
    const imagesToDisplay = product.displayImages;

    return `
      <div class="space-y-4">
        <div class="relative group">
          <div class="aspect-w-1 aspect-h-1 bg-white rounded-xl overflow-hidden shadow-lg">
            <img id="main-image"
                 src="${imagesToDisplay[this.currentImageIndex]}"
                 alt="${product.name}"
                 class="w-full h-96 object-cover cursor-zoom-in transition-transform duration-300 group-hover:scale-105">
          </div>
          <div class="absolute top-4 right-4 space-y-2">
            <button id="fullscreen-image" class="bg-white bg-opacity-80 hover:bg-opacity-100 p-2 rounded-full shadow-md transition-all duration-300">
              <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"></path>
              </svg>
            </button>
          </div>
          ${
            imagesToDisplay.length > 1
              ? `
              <button id="prev-image" class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white bg-opacity-80 hover:bg-opacity-100 p-2 rounded-full shadow-md transition-all duration-300">
                <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </button>
              <button id="next-image" class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white bg-opacity-80 hover:bg-opacity-100 p-2 rounded-full shadow-md transition-all duration-300">
                <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
              `
              : ""
          }
        </div>
        ${
          imagesToDisplay.length > 1
            ? `
            <div class="flex space-x-2 overflow-x-auto pb-2">
              ${imagesToDisplay
                .map(
                  (image, index) => `
                  <img src="${image}"
                       alt="${product.name} ${index + 1}"
                       class="thumbnail w-16 h-16 object-cover rounded-lg cursor-pointer border-2 border-transparent hover:border-blue-500 transition-all duration-300 flex-shrink-0 ${
                         index === this.currentImageIndex
                           ? "border-blue-500"
                           : ""
                       }"
                       data-index="${index}">
                `
                )
                .join("")}
            </div>
            `
            : ""
        }
        <div class="text-center text-sm text-gray-500">
          <span id="image-counter">${this.currentImageIndex + 1}</span> / ${
      imagesToDisplay.length
    }
        </div>
      </div>
    `;
  }

  renderProductInfo() {
    const product = this.product;

    return `
      <div class="space-y-6">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 mb-2">${product.name}</h1>
          <div class="flex items-center space-x-2">
            <span class="text-2xl font-semibold text-gray-900">${
              product.price
            }</span>
            <span class="${this.getAvailabilityClass(
              product.availability
            )} text-sm font-medium px-2 py-1 rounded-full">
              ${this.getAvailabilityText(product.availability)}
            </span>
          </div>
          <div class="flex items-center mt-2">${this.renderStarRating(
            product.rating
          )}</div>
        </div>
        ${
          product.sizes.length > 0
            ? `
            <div>
              <h3 class="text-lg font-semibold text-gray-900 text-start mb-3">Available Sizes</h3>
              <div class="flex flex-wrap gap-2">
                ${product.sizes
                  .map(
                    (size) => `
                    <span class="px-4 py-2 border border-gray-300 rounded-lg bg-gray-50 hover:bg-gray-100 transition-all duration-300">
                      ${size}
                    </span>
                  `
                  )
                  .join("")}
              </div>
            </div>
            `
            : ""
        }
        ${
          product.colors.length > 0
            ? `
            <div>
              <h3 class="text-lg text-start font-semibold text-gray-900 mb-3">Available Colors</h3>
              <div id="product-colors-container" class="flex flex-wrap gap-3">
                ${product.colors
                  .map(
                    (color, index) => `
                    <button type="button"
                            class="color-swatch relative w-12 h-12 rounded-full border-2 border-gray-300 flex items-center justify-center hover:scale-110 transition-all duration-300
                              ${
                                index === this.currentSelectedColorIndex
                                  ? "ring-2 ring-offset-2 ring-blue-500"
                                  : ""
                              }"
                            style="background-color: ${color.hex};"
                            title="${color.name}"
                            data-color-index="${index}">
                      <span class="sr-only">${color.name}</span>
                      ${
                        index === this.currentSelectedColorIndex
                          ? '<svg class="w-6 h-6 text-white text-shadow-sm" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>'
                          : ""
                      }
                    </button>
                  `
                  )
                  .join("")}
              </div>
            </div>
            `
            : ""
        }
      </div>
    `;
  }

  renderAdditionalDetails() {
    const product = this.product;

    return `
      <div class="space-y-6 text-start">
        <div class="flex border-b border-gray-200">
          <button class="tab-button text-start px-4 py-2 text-lg font-semibold text-gray-600 hover:text-blue-600 transition-all duration-300 ${
            this.activeTab === "description" ? "tab-active" : ""
          }" data-tab="description">Description</button>
          <button class="tab-button px-4 py-2 text-lg font-semibold text-gray-600 hover:text-blue-600 transition-all duration-300 ${
            this.activeTab === "features" ? "tab-active" : ""
          }" data-tab="features">Features</button>
          <button class="tab-button px-4 py-2 text-lg font-semibold text-gray-600 hover:text-blue-600 transition-all duration-300 ${
            this.activeTab === "specifications" ? "tab-active" : ""
          }" data-tab="specifications">Specifications</button>
        </div>
        <div id="tab-content" class="text-gray-600 leading-relaxed">
          ${this.renderTabContent()}
        </div>
      </div>
    `;
  }

  renderTabContent() {
    const product = this.product;
    switch (this.activeTab) {
      case "description":
        return `
          <div class="animate-slide-in">
            <p>${product.description}</p>
          </div>
        `;
      case "features":
        return `
          <div class="animate-slide-in">
            ${
              product.features.length > 0
                ? `<ul class="list-disc pl-5 space-y-2">
                    ${product.features
                      .map((feature) => `<li>${feature}</li>`)
                      .join("")}
                  </ul>`
                : "<p>No features available.</p>"
            }
          </div>
        `;
      case "specifications":
        return `
          <div class="animate-slide-in">
            ${
              product.specifications.length > 0
                ? `<dl class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    ${product.specifications
                      .map(
                        (spec) => `
                        <div>
                          <dt class="font-semibold text-gray-900">${
                            spec.key || "N/A"
                          }:</dt>
                          <dd>${spec.value || "N/A"}</dd>
                        </div>
                      `
                      )
                      .join("")}
                  </dl>`
                : "<p>No specifications available.</p>"
            }
          </div>
        `;
      default:
        return "";
    }
  }

  renderRelatedProducts() {
    return `
      <div class="max-w-6xl mx-auto">
        <h2 class="text-2xl font-bold text-gray-800 mb-8">
          <i class="fas fa-box-open mr-2"></i>
          Related Products
        </h2>
        ${
          this.relatedProducts.length
            ? `
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              ${this.relatedProducts
                .map(
                  (type) => `
                  <div class="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition duration-300">
                    <div class="relative h-48 overflow-hidden">
                      <img src="${type.images[0] || "./images/placeholder.jpg"}"
                           alt="${type.name}"
                           class="w-full h-full object-cover hover:scale-105 transition duration-300">
                      <div class="absolute top-2 right-2">
                        ${
                          type.colors.length
                            ? `<span class="bg-white text-red-600 text-xs px-2 py-1 rounded-full">${type.colors.length} Colors</span>`
                            : ""
                        }
                        ${
                          type.sizes.length
                            ? `<span class="bg-white text-red-600 text-xs px-2 py-1 rounded-full ml-1">${type.sizes.length} Sizes</span>`
                            : ""
                        }
                      </div>
                    </div>
                    <div class="p-4">
                      <h3 class="text-xl font-bold text-gray-800 mb-2">${
                        type.name
                      }</h3>
                     
                      <div class="mb-4">
                        ${
                          type.colors.length
                            ? `
                            <div class="flex items-center mb-2">
                              <span class="text-sm font-medium text-gray-700 mr-2">Colors:</span>
                              <div class="flex">
                                ${type.colors
                                  .slice(0, 4)
                                  .map(
                                    (color) => `
                                    <div class="w-5 h-5 rounded-full border border-gray-200 ml-1"
                                         style="background-color: ${this.getColorHex(
                                           color
                                         )}"
                                         title="${color}"></div>
                                  `
                                  )
                                  .join("")}
                                ${
                                  type.colors.length > 4
                                    ? `<span class="text-xs text-blue-600 ml-1">+${
                                        type.colors.length - 4
                                      }</span>`
                                    : ""
                                }
                              </div>
                            </div>
                            `
                            : ""
                        }
                        ${
                          type.sizes.length
                            ? `
                            <div class="flex items-center">
                              <span class="text-sm font-medium text-gray-700 mr-2">Sizes:</span>
                              <div class="flex flex-wrap">
                                ${type.sizes
                                  .slice(0, 3)
                                  .map(
                                    (size) => `
                                    <span class="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded mr-1 mb-1">${size}</span>
                                  `
                                  )
                                  .join("")}
                                ${
                                  type.sizes.length > 3
                                    ? `<span class="text-xs text-blue-600 ml-1">+${
                                        type.sizes.length - 3
                                      }</span>`
                                    : ""
                                }
                              </div>
                            </div>
                            `
                            : ""
                        }
                      </div>
                      <a href="type-detail.html?id=${type.id}&category_id=${
                    type.category_id
                  }"
                         class="flex items-center justify-center bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg transition">
                        <span>View Details</span>
                        <i class="fas fa-arrow-right ml-2"></i>
                      </a>
                    </div>
                  </div>
                `
                )
                .join("")}
            </div>
            `
            : `
            <div class="text-center py-12">
              <div class="text-blue-500 text-5xl mb-4">
                <i class="fas fa-box-open"></i>
              </div>
              <h3 class="text-2xl font-bold text-blue-800 mb-2">No Related Products</h3>
              <p class="text-gray-600">Check back later for more products in this category.</p>
            </div>
            `
        }
      </div>
    `;
  }

  renderStarRating(rating) {
    const stars = [];
    for (let i = 1; i <= 5; i++) {
      stars.push(`
        <svg class="w-5 h-5 ${
          i <= rating ? "text-yellow-400" : "text-gray-300"
        }" fill="currentColor" viewBox="0 0 20 20">
          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
        </svg>
      `);
    }
    return stars.join("");
  }

  getAvailabilityClass(availability) {
    switch (availability) {
      case "in-stock":
        return "bg-green-100 text-green-800";
      case "low-stock":
        return "bg-yellow-100 text-yellow-800";
      case "out-of-stock":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  }

  getAvailabilityText(availability) {
    switch (availability) {
      case "in-stock":
        return "In Stock";
      case "low-stock":
        return "Low Stock";
      case "out-of-stock":
        return "Out of Stock";
      default:
        return "Unknown";
    }
  }

  initializeInteractions() {
    this.setupImageGallery();
    this.setupColorSwatches();
    this.setupTabNavigation();
  }

  setupImageGallery() {
    const mainImage = document.getElementById("main-image");
    const thumbnails = document.querySelectorAll(".thumbnail");
    const prevBtn = document.getElementById("prev-image");
    const nextBtn = document.getElementById("next-image");
    const fullscreenBtn = document.getElementById("fullscreen-image");
    const imageCounter = document.getElementById("image-counter");

    thumbnails.forEach((thumb, index) => {
      thumb.addEventListener("click", () => this.changeImage(index));
    });

    if (prevBtn) {
      prevBtn.addEventListener("click", () => this.previousImage());
    }
    if (nextBtn) {
      nextBtn.addEventListener("click", () => this.nextImage());
    }
    if (fullscreenBtn) {
      fullscreenBtn.addEventListener("click", () => this.openLightbox());
    }
    if (mainImage) {
      mainImage.addEventListener("click", () => this.openLightbox());
    }
  }

  setupColorSwatches() {
    const colorContainer = document.getElementById("product-colors-container");
    if (colorContainer) {
      colorContainer.querySelectorAll(".color-swatch").forEach((swatch) => {
        swatch.addEventListener("click", (event) => {
          const colorIndex = parseInt(event.currentTarget.dataset.colorIndex);
          this.selectColor(colorIndex);
        });
      });
    }
  }

  setupTabNavigation() {
    const tabButtons = document.querySelectorAll(".tab-button");
    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const tab = button.dataset.tab;
        this.activeTab = tab;
        this.renderProductDetail();
        this.initializeInteractions();
      });
    });
  }

  selectColor(index) {
    if (index === this.currentSelectedColorIndex) return;

    this.currentSelectedColorIndex = index;
    this.currentImageIndex = 0;
    this.product.displayImages = this.product.colors[
      this.currentSelectedColorIndex
    ]?.images || ["./images/placeholder.jpg"];

    const imageGallerySection = document.getElementById(
      "image-gallery-section"
    );
    if (imageGallerySection) {
      imageGallerySection.innerHTML = this.renderImageGallery();
      this.setupImageGallery();
    }

    const productInfoSection = document.getElementById("product-info-section");
    if (productInfoSection) {
      productInfoSection.innerHTML = this.renderProductInfo();
      this.setupColorSwatches();
    }
  }

  changeImage(index) {
    this.currentImageIndex = index;
    const mainImage = document.getElementById("main-image");
    const thumbnails = document.querySelectorAll(".thumbnail");
    const imageCounter = document.getElementById("image-counter");
    const imagesToDisplay = this.product.displayImages;

    if (mainImage) {
      mainImage.src = imagesToDisplay[index];
    }

    thumbnails.forEach((thumb, i) => {
      thumb.classList.toggle("border-blue-500", i === index);
      thumb.classList.toggle("border-transparent", i !== index);
    });

    if (imageCounter) {
      imageCounter.textContent = index + 1;
    }
  }

  previousImage() {
    const imagesToDisplay = this.product.displayImages;
    if (imagesToDisplay.length === 0) return;
    const newIndex =
      this.currentImageIndex > 0
        ? this.currentImageIndex - 1
        : imagesToDisplay.length - 1;
    this.changeImage(newIndex);
  }

  nextImage() {
    const imagesToDisplay = this.product.displayImages;
    if (imagesToDisplay.length === 0) return;
    const newIndex =
      this.currentImageIndex < imagesToDisplay.length - 1
        ? this.currentImageIndex + 1
        : 0;
    this.changeImage(newIndex);
  }

  openLightbox() {
    const imagesToDisplay = this.product.displayImages;
    if (imagesToDisplay.length === 0) return;

    const lightbox = document.createElement("div");
    lightbox.id = "lightbox";
    lightbox.className =
      "fixed inset-0 bg-black bg-opacity-95 flex items-center justify-center z-50";

    lightbox.innerHTML = `
      <div class="relative max-w-4xl h-80 p-4">
        <img src="${imagesToDisplay[this.currentImageIndex]}"
             alt="${this.product.name}"
             class="max-w-full max-h-full object-contain">
        <button id="close-lightbox" class="absolute top-4 right-4 text-white bg-black bg-opacity-50 p-2 rounded-full hover:bg-opacity-75 transition-all">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `;

    document.body.appendChild(lightbox);

    document.getElementById("close-lightbox").addEventListener("click", () => {
      document.body.removeChild(lightbox);
    });

    lightbox.addEventListener("click", (e) => {
      if (e.target === lightbox) {
        document.body.removeChild(lightbox);
      }
    });
  }

  handleKeyboardNavigation(e) {
    if (this.isLoading) return;
    if (e.target.tagName === "INPUT" || e.target.tagName === "TEXTAREA") return;

    switch (e.key) {
      case "ArrowLeft":
        e.preventDefault();
        this.previousImage();
        break;
      case "ArrowRight":
        e.preventDefault();
        this.nextImage();
        break;
      case "Escape":
        const lightbox = document.getElementById("lightbox");
        if (lightbox) {
          document.body.removeChild(lightbox);
        }
        break;
      case " ":
        e.preventDefault();
        this.openLightbox();
        break;
    }
  }

  handleWindowResize() {
    this.adjustLayoutForViewport();
  }

  adjustLayoutForViewport() {
    const isMobile = window.innerWidth < 768;
    const thumbnails = document.querySelectorAll(".thumbnail");

    thumbnails.forEach((thumb) => {
      thumb.style.width = isMobile ? "3rem" : "4rem";
      thumb.style.height = isMobile ? "3rem" : "4rem";
    });
  }

  trackProductView() {
    if (typeof gtag !== "undefined") {
      gtag("event", "view_item", {
        item_id: this.product.id,
        item_name: this.product.name,
        item_category: this.product.category_name,
        value: parseFloat(this.product.price.replace(/[^\d.]/g, "")),
      });
    }
  }

  renderError(message) {
    const typeDetail = document.getElementById("type-detail");
    typeDetail.innerHTML = `
      <div class="bg-white rounded-2xl p-12 shadow-xl text-center animate-slide-in">
        <div class="mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-6">
          <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.728-.833-2.498 0L3.334 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
          </svg>
        </div>
        <h2 class="text-2xl font-bold text-gray-900 mb-4">Oops! Something went wrong</h2>
        <p class="text-gray-600 mb-8">${message}</p>
        <div class="flex justify-center space-x-4">
          <button onclick="window.history.back()" class="bg-gray-600 hover:bg-gray-700 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300">
            Go Back
          </button>
          <button onclick="location.reload()" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300">
            Try Again
          </button>
        </div>
      </div>
    `;
  }
}

document.addEventListener("DOMContentLoaded", () => {
  new ProductDetailManager();
});

async function fetchTypeDetail() {
  new ProductDetailManager();
}

if (typeof module !== "undefined" && module.exports) {
  module.exports = ProductDetailManager;
}